<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wooorm.com</title><description>website</description><link>https://wooorm.com/</link><lastBuildDate>Sat, 24 May 2025 07:37:24 GMT</lastBuildDate><dc:date>2025-05-24T07:37:24.757Z</dc:date><atom:link href="https://wooorm.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en-x-wooorm</language><dc:language>en-x-wooorm</dc:language><copyright>© 2025 Titus Wormer</copyright><dc:rights>© 2025 Titus Wormer</dc:rights><category>oss</category><category>open</category><category>source</category><category>reading</category><category>running</category><category>music</category><category>shows</category><item><title>Hello, EPUB!</title><dc:creator>Titus Wormer</dc:creator><link>https://wooorm.com/blog/hello-epub/</link><guid isPermaLink="false">https://wooorm.com/blog/hello-epub/</guid><pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate><dc:date>2020-05-27T00:00:00.000Z</dc:date><dc:modified>2020-05-27T00:00:00.000Z</dc:modified><category>epub</category><category>ebook</category><description>&#x3C;div class="article-inner">&#x3C;h1 id="hello-epub">Hello, EPUB!&#x3C;/h1>&#x3C;p>EPUB (&#x3C;em>Electronic Publication&#x3C;/em>) is a format for ebooks. It’s the most widely used open format for digital books. EPUB files can be read on most all devices. Sometimes not automatically, but then there are &#x3C;a href="https://calibre-ebook.com">converters&#x3C;/a> that transform them to create different formats that are usable for your device.&#x3C;/p>&#x3C;p>A different format exists, which is unfortunately more popular: the Kindle format, used by Amazon. In fact, there are many Kindle formats: AZW (KF7); AZW1; AZW3 (KF8), AZW4, AZK (&#x3C;a href="https://wiki.mobileread.com/wiki/AZK">summed up&#x3C;/a> as “AZK is another binary format created by Amazon for reasons that are currently not clear”), AZW8, and many more. Kindle is a proprietary mess, and I’m not interested in ranting or writing about it.&#x3C;/p>&#x3C;p>There are many ways to create EPUB files, such as Word, Pages, or InDesign, but this article shows that it’s code, which can be read and written by hand too!&#x3C;/p>&#x3C;h2 id="whats-in-an-epub">What’s in an EPUB?&#x3C;/h2>&#x3C;p>EPUB can be thought of the web platform (HTML, CSS, images, sometimes JS), glued together with XML, archived together with an &#x3C;code>.epub&#x3C;/code> extension instead of &#x3C;code>.zip&#x3C;/code>. Very much like a static site with a service worker to bring it offline, but then instead of JavaScript, it’s bundled with XML into a single archive.&#x3C;/p>&#x3C;p>A good way to learn more about the web is View Source. You can do that to with EPUBs: rename the file from &#x3C;code>book.epub&#x3C;/code> to &#x3C;code>book.zip&#x3C;/code> and unzip that with your favorite tool (or do &#x3C;code>unzip path/to/book.epub -d path/to/directory&#x3C;/code> on unix/macos), then open the result in your text editor of choice to see it’s made.&#x3C;/p>&#x3C;p>To create an EPUB, a couple things are needed. What we’re going to create here is a directory with the following files:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-text">book/
  META-INF/
    container.xml
  content.opf
  index.xhtml
  mimetype
&#x3C;/code>&#x3C;/pre>&#x3C;h2 id="mimetype">&#x3C;code>mimetype&#x3C;/code>&#x3C;/h2>&#x3C;p>First, a file called &#x3C;code>mimetype&#x3C;/code>, without extension, must exist in the root of the folder, with following value exactly copied over:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-text">application/epub+zip
&#x3C;/code>&#x3C;/pre>&#x3C;p>&#x3C;em>Note: there must not be a newline at the end of that file&#x3C;/em>.&#x3C;/p>&#x3C;p>The existence and contents of the file signals that a ZIP archive, which could be huge and slow to unzip, represents an epub ebook.&#x3C;/p>&#x3C;p>There isn’t much else to the file. But if you’re interested, it’s specified in &#x3C;a href="https://www.w3.org/publishing/epub3/epub-ocf.html#sec-zip-container-mime">EPUB OCF 3.2 § 4.3&#x3C;/a>.&#x3C;/p>&#x3C;h2 id="meta-infcontainerxml">&#x3C;code>META-INF/container.xml&#x3C;/code>&#x3C;/h2>&#x3C;p>The second requirement is that a &#x3C;code>container.xml&#x3C;/code> file exists, in a &#x3C;code>META-INF/&#x3C;/code> directory.&#x3C;/p>&#x3C;p>The contents of &#x3C;code>container.xml&#x3C;/code> looks like this:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-xml">&#x26;#x3C;?&#x3C;span class="pl-ent">xml&#x3C;/span>&#x3C;span class="pl-e"> version&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>1.0&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>?>
&#x26;#x3C;&#x3C;span class="pl-ent">container&#x3C;/span> &#x3C;span class="pl-e">version&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>1.0&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">xmlns&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>urn:oasis:names:tc:opendocument:xmlns:container&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">rootfiles&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">rootfile&#x3C;/span> &#x3C;span class="pl-e">full-path&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>content.opf&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">media-type&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>application/oebps-package+xml&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>/>
  &#x26;#x3C;/&#x3C;span class="pl-ent">rootfiles&#x3C;/span>>
&#x26;#x3C;/&#x3C;span class="pl-ent">container&#x3C;/span>>
&#x3C;/code>&#x3C;/pre>&#x3C;p>There is a tiny bit more to this file if you’re going to do weird things, but in 99.9% of cases this is exactly what you need. If you’re interested, it’s specified in &#x3C;a href="https://www.w3.org/publishing/epub3/epub-ocf.html#sec-container-metainf-container.xml">EPUB OCF 3.2 § 3.5.2.1&#x3C;/a>. The role of this file is to point to the next XML file, through the path defined with the &#x3C;code>full-path&#x3C;/code> attribute on the &#x3C;code>rootfile&#x3C;/code> element.&#x3C;/p>&#x3C;p>It could point to a different place (often: &#x3C;code>OEBPS/content.opf&#x3C;/code>). You’re free to structure your books as you please, but for this example I’m keeping the file structure as flat as possible.&#x3C;/p>&#x3C;h2 id="contentopf">&#x3C;code>content.opf&#x3C;/code>&#x3C;/h2>&#x3C;p>The last XML file that is needed is &#x3C;code>content.opf&#x3C;/code>. It can be placed anywhere in the book, but must be referenced correctly by the &#x3C;code>container.xml&#x3C;/code> file.&#x3C;/p>&#x3C;p>The bare minimum, with some extra metadata, looks like so:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-xml">&#x26;#x3C;?&#x3C;span class="pl-ent">xml&#x3C;/span>&#x3C;span class="pl-e"> version&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>1.0&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>?>
&#x26;#x3C;&#x3C;span class="pl-ent">package&#x3C;/span> &#x3C;span class="pl-e">version&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>3.0&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">xmlns&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>http://www.idpf.org/2007/opf&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">unique-identifier&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>bookid&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">metadata&#x3C;/span> &#x3C;span class="pl-e">xmlns:dc&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>http://purl.org/dc/elements/1.1/&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:title&#x3C;/span>>Book Title&#x26;#x3C;/&#x3C;span class="pl-ent">dc:title&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:creator&#x3C;/span>>Author Name&#x26;#x3C;/&#x3C;span class="pl-ent">dc:creator&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:date&#x3C;/span>>2020-02-27T00:00:00Z&#x26;#x3C;/&#x3C;span class="pl-ent">dc:date&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:rights&#x3C;/span>>Copyright © 2020 Author Name&#x26;#x3C;/&#x3C;span class="pl-ent">dc:rights&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:language&#x3C;/span>>en&#x26;#x3C;/&#x3C;span class="pl-ent">dc:language&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">meta&#x3C;/span> &#x3C;span class="pl-e">property&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>dcterms:modified&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>2020-02-27T00:00:00Z&#x26;#x3C;/&#x3C;span class="pl-ent">meta&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">dc:identifier&#x3C;/span> &#x3C;span class="pl-e">id&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>bookid&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>tag:example.com,2020:book-title:1&#x26;#x3C;/&#x3C;span class="pl-ent">dc:identifier&#x3C;/span>>
  &#x26;#x3C;/&#x3C;span class="pl-ent">metadata&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">manifest&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">item&#x3C;/span> &#x3C;span class="pl-e">id&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>index&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">href&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>index.xhtml&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">media-type&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>application/xhtml+xml&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">properties&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>nav&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>/>
  &#x26;#x3C;/&#x3C;span class="pl-ent">manifest&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">spine&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">itemref&#x3C;/span> &#x3C;span class="pl-e">idref&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>index&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>/>
  &#x26;#x3C;/&#x3C;span class="pl-ent">spine&#x3C;/span>>
&#x26;#x3C;/&#x3C;span class="pl-ent">package&#x3C;/span>>
&#x3C;/code>&#x3C;/pre>&#x3C;p>The file consists of a single &#x3C;code>&#x26;#x3C;package>&#x3C;/code> element, which includes three sections each in separate container elements:&#x3C;/p>&#x3C;ul>&#x3C;li>&#x3C;code>&#x26;#x3C;metadata>&#x3C;/code>, which is sort of like the &#x3C;code>&#x26;#x3C;head>&#x3C;/code> in HTML (or &#x3C;a href="https://developer.mozilla.org/docs/Web/Manifest">&#x3C;code>.webmanifest&#x3C;/code>&#x3C;/a>)&#x3C;/li>&#x3C;li>&#x3C;code>&#x26;#x3C;manifest>&#x3C;/code>, which lists all the files that make up the book with their media types&#x3C;/li>&#x3C;li>&#x3C;code>&#x26;#x3C;spine>&#x3C;/code>, which defines the items in &#x3C;code>&#x26;#x3C;manifest>&#x3C;/code> that make up the content of the book, and in what order they are to be placed&#x3C;/li>&#x3C;/ul>&#x3C;p>The last part, &#x3C;code>&#x26;#x3C;spine>&#x3C;/code>, is important to clarify: as books are typically long form, and rendering hundreds of pages at once takes a while, ebooks are split up in separate files, and concatenated together by EPUB readers.&#x3C;/p>&#x3C;p>For this small example, a single content file is fine, but typically books are split up per chapter, or maybe even per section.&#x3C;/p>&#x3C;p>The &#x3C;code>properties&#x3C;/code> attribute on &#x3C;code>&#x26;#x3C;item>&#x3C;/code> elements adds some extra data to that entry. In this case, it defines that the file it’s on contains the table of contents. Something like &#x3C;code>properties="scripted mathml"&#x3C;/code> would define that the file includes JavaScript and MathML.&#x3C;/p>&#x3C;p>Another interesting part is that the &#x3C;code>&#x26;#x3C;package>&#x3C;/code> element has a &#x3C;code>unique-identifier&#x3C;/code> attribute, which points to another element by its &#x3C;code>id&#x3C;/code> attribute (which should be a &#x3C;code>&#x26;#x3C;dc:identifier>&#x3C;/code>). Any URI can be placed in that element. It could be an ISBN (such as &#x3C;code>isbn:978-1-234567-89-1&#x3C;/code>), but there is no reason to get one for ebooks (and it often costs money). You can also use a UUID (such as &#x3C;code>urn:uuid:B9B412F2-CAAD-4A44-B91F-A375068478A0&#x3C;/code>). I like using the &#x3C;a href="https://en.wikipedia.org/wiki/Tag_URI_scheme">tag URI scheme&#x3C;/a>.&#x3C;/p>&#x3C;p>The value of &#x3C;code>&#x26;#x3C;dc:identifier>&#x3C;/code> is a bit like the semver major: it shouldn’t change for minor changes.&#x3C;/p>&#x3C;p>More info on the &#x3C;code>content.opf&#x3C;/code> file is available in &#x3C;a href="https://www.w3.org/publishing/epub3/epub-packages.html#sec-package-def">EPUB Packages 3.2 § 3.4&#x3C;/a>.&#x3C;/p>&#x3C;h2 id="content">Content&#x3C;/h2>&#x3C;p>Last, we need content! We’ve set up the needed ancillary files to make that happen. We can now add a file, let’s call it &#x3C;code>index.xhtml&#x3C;/code>, and add the following to it:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-html">&#x26;#x3C;!DOCTYPE html>
&#x26;#x3C;&#x3C;span class="pl-ent">html&#x3C;/span> &#x3C;span class="pl-e">xmlns&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>http://www.w3.org/1999/xhtml&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span> &#x3C;span class="pl-e">xmlns:epub&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>http://www.idpf.org/2007/ops&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">head&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">meta&#x3C;/span> &#x3C;span class="pl-e">charset&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>utf-8&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>/>
    &#x26;#x3C;&#x3C;span class="pl-ent">title&#x3C;/span>>&#x26;#x3C;/&#x3C;span class="pl-ent">title&#x3C;/span>>
  &#x26;#x3C;/&#x3C;span class="pl-ent">head&#x3C;/span>>
  &#x26;#x3C;&#x3C;span class="pl-ent">body&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">h1&#x3C;/span> &#x3C;span class="pl-e">id&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>hello-world&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>Hello, World!&#x26;#x3C;/&#x3C;span class="pl-ent">h1&#x3C;/span>>
    &#x26;#x3C;&#x3C;span class="pl-ent">nav&#x3C;/span> &#x3C;span class="pl-e">epub:type&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>toc&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>
      &#x26;#x3C;&#x3C;span class="pl-ent">h2&#x3C;/span>>Contents&#x26;#x3C;/&#x3C;span class="pl-ent">h2&#x3C;/span>>
      &#x26;#x3C;&#x3C;span class="pl-ent">ol&#x3C;/span>>
        &#x26;#x3C;&#x3C;span class="pl-ent">li&#x3C;/span>>&#x26;#x3C;&#x3C;span class="pl-ent">a&#x3C;/span> &#x3C;span class="pl-e">href&#x3C;/span>=&#x3C;span class="pl-s">&#x3C;span class="pl-pds">"&#x3C;/span>#hello-world&#x3C;span class="pl-pds">"&#x3C;/span>&#x3C;/span>>Hello, World!&#x26;#x3C;/&#x3C;span class="pl-ent">a&#x3C;/span>>&#x26;#x3C;/&#x3C;span class="pl-ent">li&#x3C;/span>>
      &#x26;#x3C;/&#x3C;span class="pl-ent">ol&#x3C;/span>>
    &#x26;#x3C;/&#x3C;span class="pl-ent">nav&#x3C;/span>>
  &#x26;#x3C;/&#x3C;span class="pl-ent">body&#x3C;/span>>
&#x26;#x3C;/&#x3C;span class="pl-ent">html&#x3C;/span>>
&#x3C;/code>&#x3C;/pre>&#x3C;p>Important to note here that the syntax is in XHTML. Not HTML. They are slightly different syntaxes. With HTML, the browser does more work to assume you had the best intentions. With XHTML, you will be yelled at if you don’t put a slash on &#x3C;code>&#x26;#x3C;img/>&#x3C;/code>, amongst other reasons.&#x3C;/p>&#x3C;p>Otherwise, this looks very similar to the HTML needed for a website: a &#x3C;code>&#x26;#x3C;head>&#x3C;/code>, a &#x3C;code>&#x26;#x3C;body>&#x3C;/code>, the same semantic elements.&#x3C;/p>&#x3C;p>What may stand out though, is that it’s pretty big for a Hello World! That’s mostly because of the table of content. Almost all apps or ereaders support a quick way to get to that landmark, and it’s something readers expect. So it’s a required feature in EPUB files.&#x3C;/p>&#x3C;p>The &#x3C;code>&#x26;#x3C;head>&#x3C;/code> doesn’t matter as much in EPUB as when building a website, you still use it to link to CSS, but the metadata that typically is in &#x3C;code>&#x26;#x3C;head>&#x3C;/code> is now pulled out into &#x3C;code>content.opf&#x3C;/code>.&#x3C;/p>&#x3C;p>A namespace is defined on the HTML element with &#x3C;code>xmlns:epub&#x3C;/code>, linking the prefix &#x3C;code>epub&#x3C;/code> to the namespace &#x3C;code>http://www.idpf.org/2007/ops&#x3C;/code>, and later defining &#x3C;code>epub:type="toc"&#x3C;/code> on the &#x3C;code>&#x26;#x3C;nav>&#x3C;/code> element. There are other extra things you can do with the &#x3C;code>epub:type&#x3C;/code> attribute, such as footnotes, but that’s for another time.&#x3C;/p>&#x3C;h2 id="final-steps">Final steps&#x3C;/h2>&#x3C;p>Finally, what needs to be done is to combine those files into a ZIP archive. Unfortunately, using your favorite ZIP archive tool won’t work, as there are some peculiar things needed for EPUBs. From the directory where you have your book files, do the following in a terminal:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-sh">zip -0X book.epub mimetype&#x3C;span class="pl-k">;&#x3C;/span> zip -0DXr book.epub &#x3C;span class="pl-c1">.&#x3C;/span> -x &#x3C;span class="pl-k">**&#x3C;/span>/.&#x3C;span class="pl-k">*&#x3C;/span> &#x3C;span class="pl-k">*&#x3C;/span>.epub
&#x3C;/code>&#x3C;/pre>&#x3C;blockquote>&#x3C;p>Note: this works on macOS, and I unfortunately don’t have experience with how to do it on other operating systems. Do let me know if you do!&#x3C;/p>&#x3C;/blockquote>&#x3C;p>What this does is create a file called &#x3C;code>book.epub&#x3C;/code> in your book directory, where &#x3C;code>mimetype&#x3C;/code> is the first entry, and adding everything else (except for hidden files or EPUBs), and &#x3C;em>not&#x3C;/em> compressing the archive.&#x3C;/p>&#x3C;p>If you prefer GUIs over bash one liners, which is very understandable, &#x3C;a href="https://ebookflightdeck.com/handbook/zipping">some of them are listed here&#x3C;/a>.&#x3C;/p>&#x3C;p>This gives us an EPUB file, &#x3C;code>book.epub&#x3C;/code>:&#x3C;/p>&#x3C;pre>&#x3C;code class="language-diff"> book/
   META-INF/
     container.xml
&#x3C;span class="pl-mi1">+  book.epub&#x3C;/span>
   content.opf
   index.xhtml
   mimetype
&#x3C;/code>&#x3C;/pre>&#x3C;p>Which you can load up in for example Books.app. Or Adobe Digital Editions. Or some other ereader app that you prefer!&#x3C;/p>&#x3C;h2 id="closing-thoughts">Closing thoughts&#x3C;/h2>&#x3C;p>I hope this walk through how to create a Hello, World! for EPUB shows that, while a bit much and weird, it is doable to create EPUB files yourself, by hand!&#x3C;/p>&#x3C;p>There’s a lot more to them though. I think I’ll write more about EPUBs in the future. When I do, I’ll link that up here!&#x3C;/p>&#x3C;/div></description></item><item><title>alex</title><dc:creator>Titus Wormer</dc:creator><link>https://wooorm.com/blog/alex/</link><guid isPermaLink="false">https://wooorm.com/blog/alex/</guid><pubDate>Tue, 26 May 2020 00:00:00 GMT</pubDate><dc:date>2020-05-26T00:00:00.000Z</dc:date><dc:modified>2020-05-26T00:00:00.000Z</dc:modified><category>alex</category><description>&#x3C;div class="article-inner">&#x3C;h1 id="alex">alex&#x3C;/h1>&#x3C;p>I wanted to write a bit about &#x3C;a href="https://alexjs.com">alex&#x3C;/a>. Why it exists. Why I spend my free time making it better. Where it’s at.&#x3C;/p>&#x3C;h2 id="origin">Origin&#x3C;/h2>&#x3C;p>About 7 years ago I got excited about natural language. I got into programming. I pushed some projects to GitHub, people raised issues, submitted pull requests, and I became a maintainer.&#x3C;/p>&#x3C;p>As you join a community, you become aware of its problems. At first you’re new and you listen—or, that’s what I did at least, around experienced developers from other countries communicating in a different language. After a bit it becomes your responsibility to deal with the community’s problems.&#x3C;/p>&#x3C;p>I got annoyed by &#x3C;code>he&#x3C;/code> in code when referring to users, instead of &#x3C;code>they&#x3C;/code>. Especially when there was &#x3C;a href="https://github.com/django/django/pull/2692">pushback&#x3C;/a>. Against “trivial” and “PC” suggestions to fix it. A friend pointed to a tweet showing problems with &#x3C;code>master&#x3C;/code>/&#x3C;code>slave&#x3C;/code>. Suggested there should be something for that, and wondered if I could make something given my experience. I felt it was my job as a maintainer to make sure our community, our readmes and docs, are welcoming and inclusive; to do something within my capabilities about it; and hoped that other people would be more inclusive too.&#x3C;/p>&#x3C;p>I looked for guidelines on these topics, made a list of potentially problematic words and their alternatives, wrapped it up in &#x3C;a href="https://github.com/retextjs/retext-equality/tree/c03133b">&#x3C;code>retext-equality&#x3C;/code>&#x3C;/a>, and published &#x3C;a href="https://github.com/get-alex/alex/tree/3621b0a">&#x3C;code>alex&#x3C;/code>&#x3C;/a>. People got angry, as they felt censored by alex for preventing them from saying “you guys”. Harassment ensued. Threats were made. Open source hasn’t been the same since.&#x3C;/p>&#x3C;p>Luckily other folks got excited by a tool that could help. Hundreds have since emailed more articles, clarified suggestions, added features, worked on translations, educated folks, helped fend of harassers, and contributed in other ways.&#x3C;/p>&#x3C;p>People feel very strongly about the language they use. They should. Being able to voice your ideas, your opinions (within reason) is important. But language can also be poison. Changing it is hard. Time, education, and conversation change language.&#x3C;/p>&#x3C;h2 id="state">State&#x3C;/h2>&#x3C;p>It seems documentation is doing okay now: the singular they is common. Other sectors too are &#x3C;a href="https://www.theregister.co.uk/2020/05/02/uks_ncsc_whitelist_blacklist/">dropping insensitive terms&#x3C;/a>. I’m biased but it seems like there’s more positive change here now than 5 years ago. In other parts, language’s outlook is bleak. Think orange monkey. It’s important to fight against the normalization and seeping spread of extreme and racist language. Especially if you’re part of the majority.&#x3C;/p>&#x3C;p>I’m pretty happy with what alex has become, but am aware of the inherent limitations. alex is a program that analyses language. Human language is unbelievably complex and nuanced. It changes constantly. Crucial to using language is understanding context: who is talking to whom, what they have in common, what they’re discussing. alex can’t understand context, a limitation that shows itself readily when you try to write documentation about the HTML attribute, &#x3C;code>disabled&#x3C;/code>. In some cases, “person with a disability” is better (it depends), but when talking about HTML, naming the particular attribute is unavoidable. That’s one specific example, but many more exist: words that are offensive in one community but not another, or slurs that were used historically but are now unknown. Sometimes suggestions also discriminate. When given &#x3C;code>act like a man&#x3C;/code>, alex suggests &#x3C;code>resolutely&#x3C;/code> and &#x3C;code>bravely&#x3C;/code>. Instead of saying: &#x3C;code>that’s sexist, prick&#x3C;/code>. I think it’s good to assume that someone didn’t know and hope that they’re interested in a better alternative, but it can hurt too. It’s extremely unfair.&#x3C;/p>&#x3C;p>alex is meant to bring up potentially offensive or inconsiderate writing. It’ll never know language like a person, so it’ll be wrong: you can ignore those messages, or &#x3C;a href="https://github.com/get-alex/alex#configuration">configure&#x3C;/a> to skip those words or change the profanity sureness setting. alex doesn’t automatically replace words, and it shouldn’t be &#x3C;a href="https://github.com/retextjs/retext-equality/pull/74#issuecomment-451213456">followed carelessly&#x3C;/a>. Where any of the documentation implies that it could solve problems I’d like to make sure that it doesn’t.&#x3C;/p>&#x3C;p>One particular feature that was requested was profanities: a list of terms that in certain scenarios are inappropriate. People thought it was weird that, when given &#x3C;code>She’s a slut&#x3C;/code>, alex would complain about the former but not the latter. I initially felt that it didn’t belong in alex, but after a &#x3C;a href="https://github.com/get-alex/alex/issues/46">long discussion&#x3C;/a>, the conversation convinced me that it did. They were added. It was &#x3C;a href="https://github.com/get-alex/alex/issues/92">annoying (and bad)&#x3C;/a>. I tried to make it better.&#x3C;/p>&#x3C;p>I recognize that I have no right to decide what is and isn’t inconsiderate. But I can maintain a project and do the work for others based on sources and consensus.&#x3C;/p>&#x3C;h2 id="technology">Technology&#x3C;/h2>&#x3C;p>Technology is not a solution. Maybe it formats your code, but it doesn’t solve everything. It definitely does not fix societal issues such as structural discrimination.&#x3C;/p>&#x3C;p>It’s been suggested to use a machine learning approach for alex, in the hope of removing bias and expanding what it catches. I have no experience in that field, so I may be wrong, but ML needs to train on data, leading to preexisting problems in said data becoming part of the data model. An example of how that is problematic, is that time when &#x3C;a href="https://www.reuters.com/article/us-amazon-com-jobs-automation-insight-idUSKCN1MK08G">Amazon tried to get rid of human bias in the interview process&#x3C;/a>. Smarter computers aren’t going to save us. A rule based system such as alex will also inherit the biases of contributors and sources, but at least they’re visible.&#x3C;/p>&#x3C;p>alex is a techno-optimism. It makes inclusion a checklist. I wonder if all checklists are bad. Whether there’s a threshold. Our community definitely has an unhealthy fondness for adding more tools to solve for anything.&#x3C;/p>&#x3C;p>Maybe alex as a tool isn’t right, but the &#x3C;a href="https://github.com/retextjs/retext-equality/tree/master/data/en">data&#x3C;/a> that various groups contributed is?&#x3C;/p>&#x3C;p>Sometimes alex is harmful. It’s a start, not enough. It has helped get projects, teams, and companies to stop using he/master/slave/simple/easy and other words, to double check their language, to start the conversation. For example, &#x3C;a href="https://github.com/facebook/react-native-website/pull/1337">&#x3C;code>facebook/react-native-website#1337&#x3C;/code>&#x3C;/a>.&#x3C;/p>&#x3C;h2 id="hindsight">Hindsight&#x3C;/h2>&#x3C;p>I’m glad that people feel empowered to create PRs to make docs better when backed by a project like alex, instead of only their personal opinions under their belt.&#x3C;/p>&#x3C;p>I’m grateful for everyone who believes that the language we use in our community and society matters and must be better. Including the newcomers making their first contribution, the technical writers, experienced maintainers, and everyone else who made alex. But also generally, for anyone who speaks up and does something about it. Most importantly though, it’s not on the people that are hurt by our language to speak up and fix it. It’s on the people in privileged positions.&#x3C;/p>&#x3C;p>alex isn’t perfect. I want to make it better. One actionable todo is to make alex’ shortcomings, laid out here, more clear in the project: that it’s a tool to help, not a solution. That it’s for language that shouldn’t have context, such as technical docs, instead of an email to a friend. To focus more on education.&#x3C;/p>&#x3C;p>A project that does focus on education is &#x3C;a href="https://www.selfdefined.app">Self-Defined&#x3C;/a> (&#x3C;a href="https://github.com/tatianamac/selfdefined">&#x3C;code>tatianamac/selfdefined&#x3C;/code>&#x3C;/a>). Described in their own words as “A modern dictionary about us; We define our words, but they don’t define us.” While work in progress, it’s a valuable resource. The continued effort is worthy of support. I’m a sponsor, and dear reader, would suggest you do the same (&#x3C;a href="https://opencollective.com/selfdefined">OpenCollective&#x3C;/a> or personally to &#x3C;a href="https://github.com/sponsors/tatianamac">Tatiana Mac&#x3C;/a>). It’s a tremendous amount of work. I’m happy that people, specifically Tatiana, are doing it. And that it’s supported by the community. I hope there’s a future where projects can work together.&#x3C;/p>&#x3C;p>There’s room. There’s a vacuum where open (source) projects that instill social change should exist. We need more of that instead of the next new framework.&#x3C;/p>&#x3C;p>I am always open to feedback on how to make alex better. On its &#x3C;a href="https://github.com/get-alex/alex#integrations">repository&#x3C;/a> or feel free to slide into my DMs.&#x3C;/p>&#x3C;p>&#x3C;em>Thanks to Nat Alison for pointing out that alex isn’t good enough. I’m grateful that she devoted time critiquing alex.&#x3C;/em>&#x3C;/p>&#x3C;/div></description></item></channel></rss>
